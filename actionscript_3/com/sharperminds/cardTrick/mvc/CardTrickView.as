/* Copyright (c) 2011  Lorin Wiener  <lorin@lorinwiener.com> All rights reserved. */package com.sharperminds.cardTrick.mvc{		//--------------------------------------	// IMPORTS	//--------------------------------------	import flash.display.*	import flash.events.*;	import flash.text.*;		import flashx.textLayout.accessibility.TextAccImpl;	import flash.text.TextField;	import fl.controls.Button;		//--------------------------------------	// CLASS	//--------------------------------------	/**	 * View class for MVC architecture to handle the assets displayed on stage, the events they trigger, and the communication of the	  * view with the model via the controller.	*/	public class CardTrickView extends View	{				//--------------------------------------		// PROPERTIES		//--------------------------------------		// CONSTANTS		private static var CARD_X_STARTING_POINT : Number = 53.4;		private static var CARD_X_OFFSET : Number = 93.3;		private static var CARD_Y_POS : Number = 160.0;		private static var BUTTON_X_STARTING_POINT : Number = 75.0		private static var BUTTON_X_OFFSET : Number = 125.0;		private static var BUTTON_Y_POS : Number = 280.0;				// PUBLIC		public var cardTrickContainer_mc : Sprite;		public var cardTrickBackground_mc : CardTrickBackground;		public var cardTrickInstructions_btn : Button;		public var cardTrickSecret_btn : Button;		public var cardTrickPerformTrick_btn : Button;		public var instructions_mc : Instructions;		public var secret_mc : Secret;		public var card1_mc : PlayingCard;		public var card2_mc : PlayingCard;		public var card3_mc : PlayingCard;		public var card4_mc : PlayingCard;		public var card5_mc : PlayingCard;		//--------------------------------------		// CONSTRUCTOR		//--------------------------------------		/**	 	 * Constructor for the view to create an application container MovieClip, application background, buttons, and playing cards		*/		public function CardTrickView (argModel : Model, argController : Controller, argContainer : Sprite)		{			super (argModel, argController);						cardTrickContainer_mc = argContainer;						addCardTrickBackground ();			addCards ();			addCardTrickInstructionsButton ();			addCardTrickSecretButton ();			addCardTrickPerformTrickButton ();						createInstructionsMovieClip ();			createSecretMovieClip ();						// EVENT LISTENERS			cardTrickInstructions_btn.addEventListener (MouseEvent.CLICK, cardTrickInstructions_btn_clickHandler);			cardTrickSecret_btn.addEventListener (MouseEvent.CLICK, cardTrickSecret_btn_clickHandler);			cardTrickPerformTrick_btn.addEventListener (MouseEvent.CLICK, cardTrickPerformTrick_btn_clickHandler);			instructions_mc.addEventListener (MouseEvent.CLICK, instructions_mc_clickHandler);			secret_mc.addEventListener (MouseEvent.CLICK, secret_mc_clickHandler);						card1_mc.addEventListener(MouseEvent.CLICK, card1_mc_clickHandler);			card2_mc.addEventListener(MouseEvent.CLICK, card2_mc_clickHandler);			card3_mc.addEventListener(MouseEvent.CLICK, card3_mc_clickHandler);			card4_mc.addEventListener(MouseEvent.CLICK, card4_mc_clickHandler);			card5_mc.addEventListener(MouseEvent.CLICK, card5_mc_clickHandler);						update ();					}				// METHODS				// PUBLIC		public function addCardTrickBackground () :void		{			cardTrickBackground_mc = new CardTrickBackground ();			cardTrickContainer_mc.addChild (cardTrickBackground_mc);		}				public function addCards () : void		{			card1_mc = new PlayingCard(1, controller.getCardState (1), controller.getCardValue (1), controller.getCardSuit (1));			card2_mc = new PlayingCard(2, controller.getCardState (2), controller.getCardValue (2), controller.getCardSuit (2));			card3_mc = new PlayingCard(3, controller.getCardState (3), controller.getCardValue (3), controller.getCardSuit (3));			card4_mc = new PlayingCard(4, controller.getCardState (4), controller.getCardValue (4), controller.getCardSuit (4));			card5_mc = new PlayingCard(5, controller.getCardState (5), controller.getCardValue (5), controller.getCardSuit (5));						card1_mc.buttonMode = true;			card2_mc.buttonMode = true;			card3_mc.buttonMode = true;			card4_mc.buttonMode = true;			card5_mc.buttonMode = true;					    cardTrickContainer_mc.addChild (card1_mc);		    cardTrickContainer_mc.addChild (card2_mc);		    cardTrickContainer_mc.addChild (card3_mc);		    cardTrickContainer_mc.addChild (card4_mc);		    cardTrickContainer_mc.addChild (card5_mc);						card1_mc.x = CARD_X_STARTING_POINT;			card2_mc.x = CARD_X_STARTING_POINT + 1 * CARD_X_OFFSET;			card3_mc.x = CARD_X_STARTING_POINT + 2 * CARD_X_OFFSET;			card4_mc.x = CARD_X_STARTING_POINT + 3 * CARD_X_OFFSET;			card5_mc.x = CARD_X_STARTING_POINT + 4 * CARD_X_OFFSET;						card1_mc.y = CARD_Y_POS;			card2_mc.y = CARD_Y_POS;			card3_mc.y = CARD_Y_POS;			card4_mc.y = CARD_Y_POS;			card5_mc.y = CARD_Y_POS;					}				public function addCardTrickInstructionsButton () : void		{			cardTrickInstructions_btn = new Button ();			cardTrickInstructions_btn.label = "Instructions";			cardTrickInstructions_btn.useHandCursor = true;		    cardTrickContainer_mc.addChild (cardTrickInstructions_btn);			cardTrickInstructions_btn.x = BUTTON_X_STARTING_POINT;			cardTrickInstructions_btn.y = BUTTON_Y_POS;		}				public function addCardTrickSecretButton () : void		{			cardTrickSecret_btn = new Button ();			cardTrickSecret_btn.label = "Reveal Secret";			cardTrickSecret_btn.useHandCursor = true;		    cardTrickContainer_mc.addChild (cardTrickSecret_btn);			cardTrickSecret_btn.x = BUTTON_X_STARTING_POINT + 1 * BUTTON_X_OFFSET;			cardTrickSecret_btn.y = BUTTON_Y_POS;		}				public function addCardTrickPerformTrickButton () : void		{			cardTrickPerformTrick_btn = new Button ();			cardTrickPerformTrick_btn.label = "Perform Trick";			cardTrickPerformTrick_btn.useHandCursor = true;		    cardTrickContainer_mc.addChild (cardTrickPerformTrick_btn);			cardTrickPerformTrick_btn.x = BUTTON_X_STARTING_POINT + 2 * BUTTON_X_OFFSET;			cardTrickPerformTrick_btn.y = BUTTON_Y_POS;		}				public function createInstructionsMovieClip () : void		{			instructions_mc = new Instructions ();			instructions_mc.buttonMode = true;		}				public function createSecretMovieClip () : void		{			secret_mc = new Secret ();			secret_mc.buttonMode = true;		}				override public function update (event : Event = null)  :  void		{			card1_mc.cardState = controller.getCardState(1);			card2_mc.cardState = controller.getCardState(2);			card3_mc.cardState = controller.getCardState(3);			card4_mc.cardState = controller.getCardState(4);			card5_mc.cardState = controller.getCardState(5);			card1_mc.cardValue = controller.getCardValue(1);			card2_mc.cardValue = controller.getCardValue(2);			card3_mc.cardValue = controller.getCardValue(3);			card4_mc.cardValue = controller.getCardValue(4);			card5_mc.cardValue = controller.getCardValue(5);			card1_mc.cardSuit = controller.getCardSuit(1);			card2_mc.cardSuit = controller.getCardSuit(2);			card3_mc.cardSuit = controller.getCardSuit(3);			card4_mc.cardSuit = controller.getCardSuit(4);			card5_mc.cardSuit = controller.getCardSuit(5);			card1_mc.updateDisplay ();			card2_mc.updateDisplay ();			card3_mc.updateDisplay ();			card4_mc.updateDisplay ();			card5_mc.updateDisplay ();		}				//--------------------------------------		// EVENT LISTENERS		//--------------------------------------		private function cardTrickInstructions_btn_clickHandler (event : MouseEvent) : void		{				cardTrickContainer_mc.addChild (instructions_mc);		}				private function cardTrickSecret_btn_clickHandler (event : MouseEvent) : void		{				cardTrickContainer_mc.addChild (secret_mc);		}				private function cardTrickPerformTrick_btn_clickHandler (event : MouseEvent) : void		{				cardTrickContainer_mc.removeChild (cardTrickInstructions_btn);				cardTrickContainer_mc.removeChild (cardTrickSecret_btn);				cardTrickContainer_mc.removeChild (cardTrickPerformTrick_btn);		}				private function instructions_mc_clickHandler (event : MouseEvent) : void		{				cardTrickContainer_mc.removeChild (instructions_mc);		}				private function secret_mc_clickHandler (event : MouseEvent) : void		{				cardTrickContainer_mc.removeChild (secret_mc);		}				private function card1_mc_clickHandler (event : MouseEvent) : void		{			controller.flipCard(card1_mc.cardPosition, card1_mc.cardState);		}				private function card2_mc_clickHandler (event : MouseEvent) : void		{			controller.flipCard(card2_mc.cardPosition, card2_mc.cardState);		}				private function card3_mc_clickHandler (event : MouseEvent) : void		{			controller.flipCard(card3_mc.cardPosition, card3_mc.cardState);		}				private function card4_mc_clickHandler (event : MouseEvent) : void		{			controller.flipCard(card4_mc.cardPosition, card4_mc.cardState);		}				private function card5_mc_clickHandler (event : MouseEvent) : void		{			controller.flipCard(card5_mc.cardPosition, card5_mc.cardState);		}			}	}