/* Copyright (c) 2011  Lorin Wiener  <lorin@lorinwiener.com> All rights reserved. */package com.sharperminds.cardTrick.mvc {		//--------------------------------------	// IMPORTS	//--------------------------------------	import flash.events.Event;			//--------------------------------------	// CLASS	//--------------------------------------	/**	 * Concrete MVC Model to store application data and application logic	*/	public class CardTrickModel extends Model	{		//--------------------------------------		// PROPERTIES		//--------------------------------------		private static var _instance:CardTrickModel;				// PRIVATE VARIABLES		private var _numberOfCardsFaceUp : uint;		private var _positionOfFirstCardSelected : uint; // A number representing the cards on screen beggining with 1 starting from the left of the screen		private var _cardPosition : uint;		private var _faceCards_arr : Array;		private var _symmetricDeck_arr : Array; // Array of playing cards with symmetric center pips		private var _nonSymmetricDeck_arr : Array; // Array of playing cards with a non-symmetric center pip		private var _limitedSymmetricDeck_arr : Array; // Array of playing cards with a non-symmetric center pip excluding face cards		private var _fullDeck_arr : Array;		private var _currentDeck_arr : Array;		private var _cards_arr : Array; // Array of cards on screen		private var _nameOfFirstCardSelected : String;						//--------------------------------------		// CONSTRUCTOR		//--------------------------------------		/**	 	 * Class constructor to initialize the trick variables		*/		public function CardTrickModel ()		{			init ();		}				//--------------------------------------		// GETTERS AND SETTERS		//--------------------------------------		public function get numberOfCardsFaceUp () : Number		{			return _numberOfCardsFaceUp;		}				public function set numberOfCardsFaceUp (argNumberOfCardsFaceUp : Number) : void		{			_numberOfCardsFaceUp  = argNumberOfCardsFaceUp;			dispatchEvent(new Event(Model.MODEL_CHANGE));		}				public function get positionOfFirstCardSelected () : Number		{			return _positionOfFirstCardSelected;		}				public function set positionOfFirstCardSelected (argPositionOfFirstCardSelected : Number) : void		{			_positionOfFirstCardSelected  = argPositionOfFirstCardSelected;			dispatchEvent(new Event(Model.MODEL_CHANGE));		}				public function get cardPosition () : uint		{			return _cardPosition;		}				public function set cardPosition (argCardPosition : uint) : void		{			_cardPosition  = argCardPosition;			dispatchEvent(new Event(Model.MODEL_CHANGE));		}				//--------------------------------------		// METHODS		//--------------------------------------				// PROTECTED		override protected function updateData () : void		{			dispatchEvent(new Event(Model.MODEL_CHANGE));		}				// PRIVATE		private function getSelectedCardsAsString () : String		{			var card1 : String = _cards_arr[0].cardSuit + _cards_arr[0].cardValue;			var card2 : String = _cards_arr[1].cardSuit + _cards_arr[1].cardValue;			var card3 : String = _cards_arr[2].cardSuit + _cards_arr[2].cardValue;			var card4 : String = _cards_arr[3].cardSuit + _cards_arr[3].cardValue;			var card5 : String = _cards_arr[4].cardSuit + _cards_arr[4].cardValue;			var selectedCardsAsString : String = card1 + card2 + card3 + card4 + card5;			return selectedCardsAsString;		}				// PUBLIC		public function getInstance () : CardTrickModel		{			if (_instance == null)			{				CardTrickModel._instance = new CardTrickModel ();			}			return CardTrickModel._instance;		}				public function init () : void		{			_numberOfCardsFaceUp = 0;			_positionOfFirstCardSelected = 0;			_nameOfFirstCardSelected = "";			_cards_arr = new Array ({cardState : "down", cardValue : "", cardSuit : ""}, {cardState : "down", cardValue : "", cardSuit : ""}, {cardState : "down", cardValue : "", cardSuit : ""}, {cardState : "down", cardValue : "", cardSuit : ""}, {cardState : "down", cardValue : "", cardSuit : ""});			_faceCards_arr = new Array ("c11", "c12", "c13", "h11", "h12", "h13", "s11", "s12", "s13",  "d11", "d12", "d13");			_symmetricDeck_arr = new Array ("c2", "c4", "c10", "c11", "c12", "c13", "h2", "h4", "h10", "h11", "h12", "h13", "s2", "s4", "s10", "s11", "s12", "s13", "d1", "d2", "d3", "d4", "d5", "d6", "d8", "d9", "d10", "d11", "d12", "d13");			_nonSymmetricDeck_arr = new Array ("c1", "c3", "c5", "c6", "c7", "c8", "c9", "c11", "c12", "c13", "h1", "h3", "h5", "h6", "h7", "h8", "h9", "h11", "h12", "h13", "s1", "s3", "s5", "s6", "s7", "s8", "s9", "s11", "s12", "s13", "d11", "d12", "d13");			_limitedSymmetricDeck_arr = new Array ("c2", "c4", "c10", "h2", "h4", "h10", "s2", "s4", "s10", "d1", "d2", "d3", "d4", "d5", "d6", "d8", "d9", "d10");			_fullDeck_arr = new Array ("c1", "c2", "c3",  "c4", "c5", "c6", "c7", "c8", "c9", "c10", "c11", "c12", "c13", "h1", "h2", "h3",  "h4", "h5", "h6", "h7", "h8", "h9", "h10", "h11", "h12", "h13", "s1", "s2", "s3",  "s4", "s5", "s6", "s7", "s8", "s9", "s10", "s11", "s12",  "s13", "d1", "d2", "d3",  "d4", "d5", "d6", "d7", "d8", "d9", "d10", "d11", "d12", "d13");			_currentDeck_arr = _fullDeck_arr;		}				// Select a card to display based on trick rules		public function flipCard (argCardPosition : uint, argCardState : String) : void		{						var cardPosition : Number = argCardPosition;			var cardState : String = argCardState;			// Turn card face up			if (cardState == "down") {								// Change the state of the card clicked to "up"				_cards_arr[cardPosition - 1].cardState = "up"								// Record the position of this card if it is the first card selected				if (_numberOfCardsFaceUp == 0) {					_positionOfFirstCardSelected = cardPosition;				}								// Swap decks! (The key to the trick!)								// If this is the first card selected use a nonSymmetric deck 				if (_numberOfCardsFaceUp == 0) {					_currentDeck_arr = _nonSymmetricDeck_arr;				} else {					/* If this card is to the right of the first card selected use a full deck, unless the first card selected was a face card.					  * In that case use a symmetric deck.					  */					if (_cardPosition > _positionOfFirstCardSelected) {						if (_faceCards_arr.toString().indexOf(_nameOfFirstCardSelected) != -1) {							_currentDeck_arr = _symmetricDeck_arr;						} else {							_currentDeck_arr = _fullDeck_arr;						}					}					/* If this card is to the left of the first card selected use a symmetric deck, unless the first card selected was a face card.					  * In that case use a limited symmetric deck which contains no face cards. 					  */					if (_cardPosition < _positionOfFirstCardSelected) {						if (_faceCards_arr.toString().indexOf(_nameOfFirstCardSelected) != -1) {							_currentDeck_arr = _limitedSymmetricDeck_arr;						} else {							_currentDeck_arr = _symmetricDeck_arr;						}					}				}								/* Pick a card from the current deck and eliminate the possibility of a randomly selected card being a duplicate of a card already selected				  * and face up				  */				do {								// Pick a random number between 0 and the length of the deck					var randomNumber : Number = Math.floor (Math.random () * Math.floor (_currentDeck_arr.length));					// Pick a random card from the deck					var randomCard : String = _currentDeck_arr.slice (randomNumber - 1, randomNumber).toString ();				} 				while (getSelectedCardsAsString().indexOf (randomCard) != -1);							// Record the name of the first card selected				if (_numberOfCardsFaceUp == 0) {					_nameOfFirstCardSelected = randomCard;				}								// Place the random card in the proper position of the _cards_arr				_cards_arr[cardPosition - 1].cardSuit =  randomCard.charAt(0);				_cards_arr[cardPosition - 1].cardValue = randomCard.substring (1, randomCard.length);				// Increase the number of cards face up count				_numberOfCardsFaceUp = _numberOfCardsFaceUp + 1;						}						// Turn card face down			else if (cardState == "up")						{								// Change the state of the card clicked to "up"				_cards_arr[cardPosition - 1].cardState = "down"								// Remove this card from the proper position of the cards_arr				_cards_arr[cardPosition - 1].cardSuit =  "";				_cards_arr[cardPosition - 1].cardValue = "";								// Decrease the number of cards face up count				_numberOfCardsFaceUp -= 1;								// If all cards are face down reset trick				if (_numberOfCardsFaceUp == 0) 				{					// Initialize all the variables and lists to start trick over					init ();				} 							}			// Dispatch event to let the view know that the model changed the card data			dispatchEvent(new Event(Model.MODEL_CHANGE));					}				public function getCardState (argCardPosition : uint) : String		{			return _cards_arr[argCardPosition - 1].cardState;		}				public function getCardValue (argCardPosition : uint) : String		{			return _cards_arr[argCardPosition - 1].cardValue;		}				public function getCardSuit (argCardPosition : uint) : String		{			return _cards_arr[argCardPosition - 1].cardSuit;		}	}	}